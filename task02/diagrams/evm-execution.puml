@startuml EVM执行环境架构
!theme plain
skinparam backgroundColor #FFFFFF
skinparam defaultFontName "Microsoft YaHei"
skinparam defaultFontSize 11

title 以太坊虚拟机 (EVM) 执行环境架构

' 定义EVM组件
package "EVM执行环境 (EVM Execution Environment)" {
    
    package "执行上下文 (Execution Context)" {
        [区块上下文\nBlock Context] as blockctx
        [交易上下文\nTransaction Context] as txctx
        [消息上下文\nMessage Context] as msgctx
        
        class "区块上下文" as BlockContext {
            + Coinbase: Address
            + GasLimit: uint64
            + BlockNumber: *big.Int
            + Time: uint64
            + Difficulty: *big.Int
            + BaseFee: *big.Int
        }
        
        class "交易上下文" as TxContext {
            + Origin: Address
            + GasPrice: *big.Int
            + GasFeeCap: *big.Int
            + GasTipCap: *big.Int
        }
    }
    
    package "执行引擎 (Execution Engine)" {
        [解释器\nInterpreter] as interpreter
        [指令集\nInstruction Set] as instructions
        [操作码\nOpcodes] as opcodes
        [跳转表\nJump Table] as jumptable
        
        interpreter --> instructions
        instructions --> opcodes
        opcodes --> jumptable
    }
    
    package "内存管理 (Memory Management)" {
        [栈\nStack] as stack
        [内存\nMemory] as memory
        [存储\nStorage] as storage
        [程序计数器\nProgram Counter] as pc
        
        class "栈操作" as StackOps {
            + Push(value)
            + Pop() value
            + Peek() value
            + Size() int
        }
        
        class "内存操作" as MemoryOps {
            + Store(offset, data)
            + Load(offset, size) data
            + Resize(size)
            + Size() int
        }
    }
    
    package "Gas计量 (Gas Metering)" {
        [Gas计算器\nGas Calculator] as gascalc
        [Gas表\nGas Table] as gastable
        [Gas限制\nGas Limit] as gaslimit
        [Gas使用\nGas Used] as gasused
        
        gascalc --> gastable
        gascalc --> gaslimit
        gascalc --> gasused
    }
    
    package "状态访问 (State Access)" {
        [状态数据库\nState Database] as statedb
        [账户状态\nAccount State] as account
        [合约存储\nContract Storage] as contractstorage
        [代码缓存\nCode Cache] as codecache
        
        statedb --> account
        statedb --> contractstorage
        statedb --> codecache
    }
}

' 执行流程
package "执行流程 (Execution Flow)" {
    
    [1. 初始化EVM] as init
    [2. 加载合约代码] as loadcode
    [3. 设置执行环境] as setupenv
    [4. 执行字节码] as execute
    [5. Gas计量] as gasmetering
    [6. 状态更新] as stateupdate
    [7. 返回结果] as result
    
    init --> loadcode
    loadcode --> setupenv
    setupenv --> execute
    execute --> gasmetering
    gasmetering --> stateupdate
    stateupdate --> result
}

' 指令类型
package "指令分类 (Instruction Categories)" {
    
    package "算术运算" {
        [ADD] as add
        [SUB] as sub
        [MUL] as mul
        [DIV] as div
        [MOD] as mod
        [EXP] as exp
    }
    
    package "比较运算" {
        [LT] as lt
        [GT] as gt
        [EQ] as eq
        [ISZERO] as iszero
    }
    
    package "位运算" {
        [AND] as and
        [OR] as or
        [XOR] as xor
        [NOT] as not
        [BYTE] as byte
        [SHL] as shl
        [SHR] as shr
    }
    
    package "栈操作" {
        [PUSH1-PUSH32] as push
        [POP] as pop
        [DUP1-DUP16] as dup
        [SWAP1-SWAP16] as swap
    }
    
    package "内存操作" {
        [MLOAD] as mload
        [MSTORE] as mstore
        [MSTORE8] as mstore8
        [MSIZE] as msize
    }
    
    package "存储操作" {
        [SLOAD] as sload
        [SSTORE] as sstore
    }
    
    package "控制流" {
        [JUMP] as jump
        [JUMPI] as jumpi
        [JUMPDEST] as jumpdest
        [STOP] as stop
        [RETURN] as return
        [REVERT] as revert
    }
    
    package "环境信息" {
        [ADDRESS] as address
        [BALANCE] as balance
        [CALLER] as caller
        [CALLVALUE] as callvalue
        [CALLDATALOAD] as calldataload
        [CALLDATASIZE] as calldatasize
        [GASPRICE] as gasprice
        [BLOCKHASH] as blockhash
        [COINBASE] as coinbase
        [TIMESTAMP] as timestamp
        [NUMBER] as number
        [DIFFICULTY] as difficulty
        [GASLIMIT] as gaslimit_op
    }
    
    package "外部调用" {
        [CALL] as call
        [CALLCODE] as callcode
        [DELEGATECALL] as delegatecall
        [STATICCALL] as staticcall
        [CREATE] as create
        [CREATE2] as create2
    }
    
    package "日志操作" {
        [LOG0] as log0
        [LOG1] as log1
        [LOG2] as log2
        [LOG3] as log3
        [LOG4] as log4
    }
}

' 执行示例
package "执行示例 (Execution Example)" {
    
    participant "调用者\nCaller" as caller_ex
    participant "EVM" as evm_ex
    participant "合约A\nContract A" as contractA
    participant "合约B\nContract B" as contractB
    participant "状态DB\nState DB" as statedb_ex
    
    caller_ex -> evm_ex : 1. 发起交易调用
    note right : 调用合约A的方法
    
    evm_ex -> contractA : 2. 加载合约代码
    note right : 从状态DB加载字节码
    
    evm_ex -> evm_ex : 3. 初始化执行环境
    note right : 设置栈、内存、Gas等
    
    loop 执行字节码指令
        evm_ex -> evm_ex : 4. 取指令
        note right : 从PC位置读取操作码
        
        evm_ex -> evm_ex : 5. 解码指令
        note right : 解析操作码和参数
        
        evm_ex -> evm_ex : 6. 执行指令
        note right : 执行具体操作
        
        evm_ex -> evm_ex : 7. 更新Gas
        note right : 扣除指令Gas消耗
        
        alt Gas不足
            evm_ex -> caller_ex : 返回Out of Gas错误
        else 继续执行
            note right : 更新PC，继续下一条指令
        end
    end
    
    alt 外部调用
        evm_ex -> contractB : 8. 调用合约B
        note right : CALL指令调用其他合约
        
        contractB -> evm_ex : 9. 返回调用结果
        note right : 返回数据和Gas使用
    end
    
    evm_ex -> statedb_ex : 10. 更新状态
    note right : 提交状态变更
    
    evm_ex -> caller_ex : 11. 返回执行结果
    note right : 返回数据、Gas使用、日志等
}

' Gas消耗表
package "Gas消耗表 (Gas Cost Table)" {
    
    class "基础操作Gas消耗" as BasicGas {
        ADD, SUB, MUL: 3
        DIV, MOD: 5
        EXP: 10 + 50*字节数
        LT, GT, EQ: 3
        AND, OR, XOR: 3
        PUSH1-PUSH32: 3
        POP: 2
        DUP1-DUP16: 3
        SWAP1-SWAP16: 3
    }
    
    class "内存操作Gas消耗" as MemoryGas {
        MLOAD: 3
        MSTORE, MSTORE8: 3
        内存扩展: 3 + 内存大小²/512
    }
    
    class "存储操作Gas消耗" as StorageGas {
        SLOAD: 800 (冷访问) / 100 (热访问)
        SSTORE: 20000 (新值) / 5000 (修改) / 2900 (删除)
    }
    
    class "外部调用Gas消耗" as CallGas {
        CALL: 700 + 转账Gas + 新账户Gas
        DELEGATECALL: 700
        STATICCALL: 700
        CREATE: 32000
        CREATE2: 32000 + 6*代码大小
    }
}

' 连接关系
blockctx --> interpreter : 提供上下文
txctx --> interpreter : 提供上下文
msgctx --> interpreter : 提供上下文

interpreter --> stack : 操作栈
interpreter --> memory : 操作内存
interpreter --> storage : 访问存储
interpreter --> pc : 更新PC

interpreter --> gascalc : Gas计量
gascalc --> gastable : 查询Gas消耗

interpreter --> statedb : 状态访问
statedb --> account : 账户操作
statedb --> contractstorage : 存储操作

' 性能优化说明
note bottom of interpreter
    **EVM性能优化**
    • 预编译合约: 常用算法的原生实现
    • 指令缓存: 缓存热点指令
    • 状态缓存: 缓存频繁访问的状态
    • 并行执行: 支持无冲突交易并行
end note

' 安全机制说明
note top of gascalc
    **EVM安全机制**
    • Gas限制: 防止无限循环
    • 栈深度限制: 防止栈溢出
    • 内存限制: 防止内存耗尽
    • 调用深度限制: 防止递归攻击
end note

@enduml